# ==================================================
# Prettier is an opinionated code formatter.
#
# Description:
#   The configuration file will be resolved starting from the location of the file being formatted,
#   and searching up the file tree until a config file is (or isn't) found.
# Note:
#   If you're asking yourself "Do I need to configure anything?" the answer is "No".
#   `Prettier` is all about sensible defaults.
# References:
#   - [Prettier](https://prettier.io/)
#   - [Options](https://prettier.io/docs/en/options.html)
#   - [Option Philosophy](https://prettier.io/docs/en/option-philosophy.html)
# ==================================================


# Print Width
#   Specify the line length that the printer will wrap on.
#
# | Default | CLI Override        | API Override      |
# | 80      | --print-width <int> | printWidth: <int> |
printWidth = 80

# Tab Width
#   Specify the number of spaces per indentation-level.
#
# | Default | CLI Override      | API Override    |
# | 2       | --tab-width <int> | tabWidth: <int> |
tabWidth = 2

# Tabs
#   Indent lines with tabs instead of spaces.
#
# | Default | CLI Override | API Override    |
# | false   | --use-tabs   | useTabs: <bool> |
useTabs = false

# Semicolons
#   Print semicolons at the ends of statements.
#
# Valid options:
#   true - Add a semicolon at the end of every statement.
#   false - Only add semicolons at the beginning of lines that may introduce ASI failures.
#
# | Default | CLI Override | API Override |
# | true    | --no-semi    | semi: <bool> |
semi = true

# Quotes
#   Use single quotes instead of double quotes.
#
# | Default | CLI Override   | API Override        |
# | false   | --single-quote | singleQuote: <bool> |
singleQuote = false

# Quote Props
#   Change when properties in objects are quoted.
#
# Valid options:
#   "as-needed" - Only add quotes around object properties where required.
#   "consistent" - If at least one property in an object requires quotes, quote all properties.
#   "preserve" - Respect the input use of quotes in object properties.
#
# | Default     | CLI Override                                  | API Override                                  |
# | "as-needed" | --quote-props <as-needed|consistent|preserve> | quoteProps: "<as-needed|consistent|preserve>" |
quoteProps = "as-needed"

# JSX Quotes
#   Use single quotes instead of double quotes in JSX.
#
# | Default | CLI Override       | API Override           |
# | false   | --jsx-single-quote | jsxSingleQuote: <bool> |
jsxSingleQuote = false

# Trailing Commas
#   Print trailing commas wherever possible when multi-line. (A single-line array, for example, never gets trailing commas.)
#
# Valid options:
#   "es5" - Trailing commas where valid in ES5 (objects, arrays, etc.)
#   "none" - No trailing commas.
#   "all" - Trailing commas wherever possible (including trailing commas in function parameter lists and calls). This requires node 8 or a modern browser that supports ES2017 or transform with babel.
#
# | Default | CLI Override                    | API Override                    |
# | "es5"   | --trailing-comma <es5|none|all> | trailingComma: "<es5|none|all>" |
trailingComma = "es5"

# Bracket Spacing
#   Print spaces between brackets in object literals.
#
# Valid options:
#   true - Example: { foo: bar }.
#   false - Example: {foo: bar}.
#
# | Default | CLI Override         | API Override           |
# | true    | --no-bracket-spacing | bracketSpacing: <bool> |
bracketSpacing = true

# Bracket Line
#   Put the > of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
#
# Valid options:
#   true - Example:
#     ```html
#     <button
#       className="prettier-class"
#       id="prettier-id"
#       onClick={this.handleClick}>
#       Click Here
#     </button>
#     ```
#   false - Example:
#     ```html
#     <button
#       className="prettier-class"
#       id="prettier-id"
#       onClick={this.handleClick}
#     >
#       Click Here
#     </button>
#     ```
#
# | Default | CLI Override            | API Override               |
# | false   | --bracket-same-line | bracketSameLine: <bool> |
bracketSameLine = false

# Arrow Function Parentheses
#   Include parentheses around a sole arrow function parameter.
#
# Valid options:
#   "always" - Always include parens. Example: (x) => x
#   "avoid" - Omit parens when possible. Example: x => x
#
# | Default  | CLI Override                  | API Override                  |
# | "always" | --arrow-parens <always|avoid> | arrowParens: "<always|avoid>" |
arrowParens = "always"

# Range
#   Format only a segment of a file.
#   These two options can be used to format code starting and ending at a given character offset (inclusive and exclusive, respectively). The range will extend:
#     Backwards to the start of the first line containing the selected statement.
#     Forwards to the end of the selected statement.
#   These options cannot be used with cursorOffset.
#
# | Default  | CLI Override        | API Override      |
# | 0        | --range-start <int> | rangeStart: <int> |
# | Infinity | --range-end <int>   | rangeEnd: <int>   |
# rangeStart = 0
# rangeEnd = Infinity

# Parser
#   Specify which parser to use.
#   Prettier automatically infers the parser from the input file path, so you shouldn't have to change this setting.
#
# | Default | CLI Override                            | API Override                                       |
# | None    | --parser <string>, --parser ./my-parser | parser: "<string>", parser: require("./my-parser") |
# parser = None

# File Path
#   Specify the file name to use to infer which parser to use.
#   This option is only useful in the CLI and API. It doesn't make sense to use it in a configuration file.
#
# | Default | CLI Override              | API Override         |
# | None    | --stdin-filepath <string> | filepath: "<string>" |
# filepath = None

# Require Pragma
#   Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
#   For example, a file with the following as its first comment will be formatted when --require-pragma is supplied:
#     ```js
#     /**
#      * @prettier
#      */
#     ```
#   or
#     ```js
#     /**
#      * @format
#      */
#     ```
#
# | Default | CLI Override     | API Override          |
# | false   | --require-pragma | requirePragma: <bool> |
requirePragma = false

# Insert Pragma
#   Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the --require-pragma option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
#
# | Default | CLI Override    | API Override         |
# | false   | --insert-pragma | insertPragma: <bool> |
insertPragma = false

# Prose Wrap
#   By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer, e.g. GitHub comment and BitBucket. In some cases you may want to rely on editor/viewer soft wrapping instead, so this option allows you to opt out with "never".
#
# Valid options:
#   "always" - Wrap prose if it exceeds the print width.
#   "never" - Do not wrap prose.
#   "preserve" - Wrap prose as-is.
#
# | Default    | CLI Override                         | API Override                         |
# | "preserve" | --prose-wrap <always|never|preserve> | proseWrap: "<always|never|preserve>" |
proseWrap = "preserve"


# HTML Whitespace Sensitivity
#   Specify the global whitespace sensitivity for HTML files, see whitespace-sensitive formatting for more info.
#
# Valid options:
#   "css" - Respect the default value of CSS display property.
#   "strict" - Whitespaces are considered sensitive.
#   "ignore" - Whitespaces are considered insensitive.
#
# | Default | CLI Override                                      | API Override                                     |
# | "css"   | --html-whitespace-sensitivity <css|strict|ignore> | htmlWhitespaceSensitivity: "<css|strict|ignore>" |
htmlWhitespaceSensitivity = "css"

# Vue files script and style tags indentation
#   Whether or not to indent the code inside <script> and <style> tags in Vue files. Some people (like the creator of Vue) don't indent to save an indentation level, but this might break code folding in your editor.
#
# Valid options:
#   "false" - Do not indent script and style tags in Vue files.
#   "true" - Indent script and style tags in Vue files.
#
# | Default | CLI Override                  | API Override                    |
# | false   | --vue-indent-script-and-style | vueIndentScriptAndStyle: <bool> |
vueIndentScriptAndStyle = false

# End of Line
#   All modern text editors in all operating systems are able to correctly display line endings when \n (LF) is used. However, old versions of Notepad for Windows will visually squash such lines into one as they can only deal with \r\n (CRLF).
#
# Valid options:
#   "lf" – Line Feed only (\n), common on Linux and macOS as well as inside git repos
#   "crlf" - Carriage Return + Line Feed characters (\r\n), common on Windows
#   "cr" - Carriage Return character only (\r), used very rarely
#   "auto" - Maintain existing line endings (mixed values within one file are normalised by looking at what's used after the first line)
#
# | Default | CLI Override                    | API Override                   |
# | "lf"    | --end-of-line <lf|crlf|cr|auto> | endOfLine: "<lf|crlf|cr|auto>" |
endOfLine = "lf"

# Embedded Language Formatting
#   Control whether Prettier formats quoted code embedded in the file.
#
# Valid options:
#   "auto" – Format embedded code if Prettier can automatically identify it.
#   "off" - Never automatically format embedded code.
#
# | Default | CLI Override                       | API Override                      |
# | "auto"  | --embedded-language-formatting=off | embeddedLanguageFormatting: "off" |
embeddedLanguageFormatting = "auto"
